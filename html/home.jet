<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Home</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">

    <style>
        .chatBox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
            border-radius: 5px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col">
            <h1>This is the home page</h1>
            <hr>
        </div>
    </div>
    <div class="row">
        <a href="https://google.com">Go To Google</a>
        <div class="col-md-8">
            <h3>Chat</h3>

            <div class="form-group mb-1">
                <label for="username" class="mt-1">Username</label>
                <input type="text" name="username" id="username" class="form-control">
            </div>

            <div class="form-group mb-1">
                <label for="message" class="mt-1">Message</label>
                <input type="text" name="message" id="message" class="form-control">

                <button class="btn btn-outline-secondary my-1" id="send">Send</button>
            </div>

            <input type="hidden" name="action" id="action">

            <div id="status" class="d-flex justify-content-end"></div>
            <hr class="mt-1 mb-3">

            <div class="chatBox" id="output"></div>
        </div>
        <div class="col-md-4">
            <h3>Who's Online</h3>
            <ul id="online_users">

            </ul>
        </div>
    </div>
</div>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script>
<script src="https://unpkg.com/notie"></script>
<script src="/static/reconnecting-websocket.min.js"></script>

<script>
    let socket = null;
    let o = document.getElementById('output');
    let messageField = document.getElementById('message');
    let usernameField = document.getElementById('username');
    let sendButton = document.getElementById('send');
    let onlineUsersField = document.getElementById('online_users');
    let statusDiv = document.getElementById('status');

    window.onbeforeunload = function () {
        let jsonData = {};
        jsonData['action'] = 'left';
        jsonData['username'] = usernameField.value;
        socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function () {
        socket = new ReconnectingWebSocket('ws:127.0.0.1:8080/ws', null, {
            debug: true,
            reconnectInterval: 3000
        })

        const offline = `<span class="badge bg-danger">Not Connected</span>`;
        const online = `<span class="badge bg-success">Connected</span>`;

        socket.onopen = () => {
            console.log("Successfully Connected");
            statusDiv.innerHTML = online;
        }

        socket.onclose = () => {
            console.log("Connection Closed");
            statusDiv.innerHTML = offline;
        }

        socket.onerror = err => {
            statusDiv.innerHTML = offline;
        }

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);

            switch (data.action) {
                case 'list_users':
                    let ul = onlineUsersField;
                    while (ul.firstChild) ul.removeChild(ul.firstChild)

                    if (data.connected_users && data.connected_users.length > 0) {
                        data.connected_users.forEach(item => {
                            let li = document.createElement('li');
                            li.appendChild(document.createTextNode(item));
                            ul.appendChild(li);
                        })
                    }
                    break;

                case 'left':
                    warning(data.message)
                    break

                case 'broadcast':
                    o.innerHTML = o.innerHTML + data.message
            }
        }

        usernameField.addEventListener('change', function () {
            let jsonData = {};
            jsonData['action'] = 'username';
            jsonData['username'] = this.value;
            socket.send(JSON.stringify(jsonData));
        })

        messageField.addEventListener('keydown', function (e) {
            if (e.code === 'Enter') {
                fireSendMessage(e)
            }
        })

        sendButton.addEventListener('click', function (e) {
            fireSendMessage(e)
        })
    })

    function fireSendMessage(e) {
        if (!socket) {
            error('no connection', true)
            return;
        }
        if (
            messageField.value === '' ||
            usernameField.value === ''
        ) {
            error('invalid input')
            return;
        }
        e.preventDefault();
        e.stopPropagation();
        sendMessage()
    }

    function sendMessage() {
        let jsonData = {};
        jsonData['action'] = 'broadcast';
        jsonData['username'] = usernameField.value;
        jsonData['message'] = messageField.value;
        socket.send(JSON.stringify(jsonData));

        messageField.value = '';
    }

    function error(text, stay = false) {
        notie.alert({
            type: 'error',
            text: text,
            stay: stay,
        })
    }

    function warning(text, stay = false) {
        notie.alert({
            type: 'warning',
            text: text,
            stay: stay,
        })
    }
</script>
</html>